@page "/eventdetails/{Id:int}"
@rendermode InteractiveServer

@using System.Security.Claims
@using EventManagement.Models
@using EventManagement.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject EventService EventService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Nav

<h3 class="mb-3">Event Details</h3>

@if (loading)
{
    <div class="spinner-border" role="status"><span class="visually-hidden">Loading…</span></div>
}
else if (ev is null)
{
    <div class="alert alert-warning">Event not found.</div>
}
else
{
    <div class="card p-3 m-2">
        <div class="d-flex justify-content-between align-items-center">
            <h4 class="mb-1">@ev.Title</h4>

            @if (isSubscribed)
            {
                <span class="badge bg-success">Subscribed</span>
            }
            else if (isFull)
            {
                <span class="badge bg-danger">Full</span>
            }
            else if (isClosed)
            {
                <span class="badge bg-secondary">Closed</span>
            }
        </div>

        <p class="mb-1"><b>Date:</b> @ev.StartDateTime.ToString("dd/MM/yyyy HH:mm")</p>
        <p class="mb-1"><b>Location:</b> @ev.Location</p>

        @if (!string.IsNullOrWhiteSpace(ev.Description))
        {
            <p class="mb-1"><b>Description:</b> @ev.Description</p>
        }
        @if (!string.IsNullOrWhiteSpace(ev.Category))
        {
            <p class="mb-1"><b>Category:</b> @ev.Category</p>
        }

    <p class="mb-2"><b>Participants:</b> @(ev.Subscriptions?.Count ?? 0) / @ev.MaxParticipants</p>

    <div class="mt-2">
        <button type="button"
                class="btn @(isSubscribed ? "btn-outline-danger" : "btn-success")"
                disabled="@(!CanInteract)"
                @onclick="ToggleSubscription">
            @(
                        isSubscribed
                        ? "Unsubscribe"
                        : (isClosed ? "Event Closed" : (isFull ? "Event Full" : "Subscribe"))
                        )
        </button>

            <a class="btn btn-sm btn-outline-secondary rounded-pill ms-2 d-inline-flex align-items-center px-3"
               href="/">
                <span class="oi oi-arrow-left me-2" aria-hidden="true"></span>
                Back
            </a>
        </div>

    @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @alertClass mt-3 mb-0">@message</div>
        }
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private Event? ev;
    private bool loading = true;

    private string? message;
    private string alertClass = "alert-info";

    private string? currentUserId;
    private bool isAdmin;
    private bool isSubscribed;

    private bool isFull => (ev?.Subscriptions?.Count ?? 0) >= (ev?.MaxParticipants ?? 0);
    private bool isClosed => ev is not null && ev.StartDateTime <= DateTime.Now;

    // User can click if:
    // - NOT admin, and logged in, and
    // - either already subscribed (to allow Unsubscribe), or event is open for new subscriptions
    private bool CanInteract =>
        !isAdmin &&
        !string.IsNullOrEmpty(currentUserId) &&
        (isSubscribed || (!isFull && !isClosed));

    protected override async Task OnInitializedAsync()
    {
        // Load event first
        ev = await EventService.GetByIdAsync(Id);

        // Robust auth resolution
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            isAdmin = user.IsInRole("Admin");
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(currentUserId) && ev is not null)
            {
                isSubscribed = await EventService.IsSubscribedAsync(Id, currentUserId);
            }
        }

        loading = false;

        if (ev is null)
        {
            alertClass = "alert-warning";
            message = "Event not found or it may have been deleted.";
        }
    }

    private async Task ToggleSubscription()
    {
        if (ev is null) return;

        if (isAdmin)
        {
            alertClass = "alert-info";
            message = "Admins cannot subscribe to events.";
            return;
        }

        if (string.IsNullOrEmpty(currentUserId))
        {
            alertClass = "alert-warning";
            message = "Please log in to subscribe.";
            return;
        }

        try
        {
            if (!isSubscribed)
            {
                var result = await EventService.SubscribeAsync(Id, currentUserId);
                switch (result)
                {
                    case SubscribeResult.Success:
                        alertClass = "alert-success"; message = "Successfully subscribed."; isSubscribed = true; break;
                    case SubscribeResult.AlreadySubscribed:
                        alertClass = "alert-info"; message = "You are already subscribed."; isSubscribed = true; break;
                    case SubscribeResult.EventFull:
                        alertClass = "alert-danger"; message = "Sorry, the event is full."; break;
                    case SubscribeResult.UserNotFound:
                        alertClass = "alert-danger"; message = "User not found."; break;
                    case SubscribeResult.EventNotFound:
                    default:
                        alertClass = "alert-danger"; message = "Event not found."; break;
                }
            }
            else
            {
                var ok = await EventService.UnsubscribeAsync(Id, currentUserId);
                if (ok)
                {
                    alertClass = "alert-info"; message = "Unsubscribed."; isSubscribed = false;
                }
                else
                {
                    alertClass = "alert-danger"; message = "Unsubscribe failed.";
                }
            }

            // Refresh event to update counters and flags
            ev = await EventService.GetByIdAsync(Id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            alertClass = "alert-danger";
            message = "An unexpected error occurred.";
            Console.Error.WriteLine(ex);
        }
    }
}
