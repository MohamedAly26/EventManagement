@page "/eventdetails/{Id:int}"
@rendermode InteractiveServer
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using EventManagement.Models
@inject EventManagement.Services.EventService EventService
@inject EventManagement.Data.AppDbContext Db
@inject AuthenticationStateProvider AuthProvider

<h3 class="mb-3">Event Details</h3>

@if (loading)
{
    <div class="spinner-border" role="status"><span class="visually-hidden">Loading…</span></div>
}
else if (ev is null)
{
    <div class="alert alert-warning">Event not found.</div>
}
else
{
    <div class="card p-3 m-2">
        <div class="d-flex justify-content-between align-items-center">
            <h4 class="mb-1">@ev.Title</h4>

            @if (isSubscribed)
            {
                <span class="badge bg-success">Subscribed</span>
            }
            else if (isFull)
            {
                <span class="badge bg-danger">Full</span>
            }
            else if (isClosed)
            {
                <span class="badge bg-secondary">Closed</span>
            }
        </div>

        <p class="mb-1"><b>Date:</b> @ev.StartDateTime.ToString("dd/MM/yyyy HH:mm")</p>
        <p class="mb-1"><b>Location:</b> @ev.Location</p>

        @if (!string.IsNullOrWhiteSpace(ev.Description))
        {
            <p class="mb-1"><b>Description:</b> @ev.Description</p>
        }
        @if (!string.IsNullOrWhiteSpace(ev.Category))
        {
            <p class="mb-1"><b>Category:</b> @ev.Category</p>
        }

    <p class="mb-2"><b>Participants:</b> @(ev.Subscriptions?.Count ?? 0) / @ev.MaxParticipants</p>

    <div class="mt-2">
        <button type="button"
                class="btn @(isSubscribed ? "btn-outline-danger" : "btn-success")"
                disabled="@(!CanInteract)"
                @onclick="ToggleSubscription">
            @(isSubscribed
                        ? "Unsubscribe"
                        : (isClosed ? "Event Closed" : (isFull ? "Event Full" : "Subscribe")))
        </button>

            <a class="btn btn-sm btn-outline-secondary rounded-pill ms-2 px-3" href="/">Back</a>
        </div>

    @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @alertClass mt-3 mb-0">@message</div>
        }
    </div>

    <h4 class="mt-4">Comments</h4>

    @if (thread is null)
    {
        <p>Loading…</p>
    }
    else
    {
        @if (roots.Count == 0)
        {
            <div class="alert alert-info">Be the first to comment.</div>
        }
        else
        {
            @foreach (var c in roots)
            {
                <UserCommentItem Comment="c"
                                 Depth="0"
                                 OnReply="PostReply" />
            }
        }

        <AuthorizeView>
            <Authorized>
                <div class="card mt-3">
                    <div class="card-body">
                        <textarea class="form-control" rows="3"
                                  placeholder="Write a comment…"
                                  @bind="newText"></textarea>
                        <button class="btn btn-primary mt-2"
                                disabled="@string.IsNullOrWhiteSpace(newText)"
                                @onclick="PostNew">
                            Post comment
                        </button>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="alert alert-warning mt-2">Please log in to comment.</div>
            </NotAuthorized>
        </AuthorizeView>
    }
}

@code {
    [Parameter] public int Id { get; set; }

    // ---- comments ----
    private List<Comment>? thread;          // flat list from DB
    private List<Comment> roots = new();    // only top-level comments
    private string newText = "";

    // ---- event + subscription ----
    private Event? ev;
    private bool loading = true;

    private string? currentUserId;
    private bool isAdmin;
    private bool isSubscribed;
    private string? message;
    private string alertClass = "alert-info";

    private bool isFull => (ev?.Subscriptions?.Count ?? 0) >= (ev?.MaxParticipants ?? 0);
    private bool isClosed => ev is not null && ev.StartDateTime <= DateTime.Now;

    private bool CanInteract =>
        !isAdmin &&
        !string.IsNullOrEmpty(currentUserId) &&
        (isSubscribed || (!isFull && !isClosed));

    protected override async Task OnInitializedAsync()
    {
        // Event
        ev = await EventService.GetByIdAsync(Id);

        // Auth
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            isAdmin = user.IsInRole("Admin");
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(currentUserId) && ev is not null)
                isSubscribed = await EventService.IsSubscribedAsync(Id, currentUserId);
        }

        // Comments
        await LoadComments();
        loading = false;
    }

    private async Task LoadComments()
    {
        thread = await Db.Comments
                         .Where(c => c.EventId == Id && !c.IsHidden)
                         .OrderBy(c => c.CreatedAt)
                         .ToListAsync();

        // build tree
        foreach (var c in thread) c.Replies = new List<Comment>();

        var byId = thread.ToDictionary(c => c.Id);
        foreach (var c in thread.Where(x => x.ParentId.HasValue))
            if (byId.TryGetValue(c.ParentId!.Value, out var parent))
                parent.Replies.Add(c);

        foreach (var c in thread)
            c.Replies = c.Replies.OrderBy(x => x.CreatedAt).ToList();

        roots = thread.Where(c => c.ParentId == null)
                      .OrderBy(c => c.CreatedAt)
                      .ToList();
    }

    private async Task PostNew()
    {
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        var u = auth.User;
        if (!(u.Identity?.IsAuthenticated ?? false)) return;

        var userId = u.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
        var disp = u.Identity?.Name ?? u.FindFirst(ClaimTypes.Email)?.Value ?? "User";

        Db.Comments.Add(new Comment
        {
            EventId = Id,
            Body = newText.Trim(),
            UserId = userId,
            UserDisplayName = disp,
            FromAdmin = false
        });
        await Db.SaveChangesAsync();

        newText = "";
        await LoadComments();
        StateHasChanged();
    }

    // firma compatibile con EventCallback<(int parentId, string body)>
    private async Task PostReply((int parentId, string body) data)
    {
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        var u = auth.User;
        if (!(u.Identity?.IsAuthenticated ?? false)) return;

        var userId = u.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
        var disp = u.Identity?.Name ?? u.FindFirst(ClaimTypes.Email)?.Value ?? "User";

        var parent = await Db.Comments.FindAsync(data.parentId);
        if (parent is null) return;

        Db.Comments.Add(new Comment
        {
            EventId = Id,
            ParentId = data.parentId,
            Body = data.body.Trim(),
            UserId = userId,
            UserDisplayName = disp,
            FromAdmin = false
        });
        await Db.SaveChangesAsync();

        await LoadComments();
        StateHasChanged();
    }

    private async Task ToggleSubscription()
    {
        if (ev is null) return;

        if (isAdmin)
        { alertClass = "alert-info"; message = "Admins cannot subscribe to events."; return; }

        if (string.IsNullOrEmpty(currentUserId))
        { alertClass = "alert-warning"; message = "Please log in to subscribe."; return; }

        if (!isSubscribed)
        {
            var r = await EventService.SubscribeAsync(Id, currentUserId);
            switch (r)
            {
                case SubscribeResult.Success:
                    alertClass = "alert-success"; message = "Successfully subscribed."; isSubscribed = true; break;
                case SubscribeResult.AlreadySubscribed:
                    alertClass = "alert-info"; message = "You are already subscribed."; isSubscribed = true; break;
                case SubscribeResult.EventFull:
                    alertClass = "alert-danger"; message = "Sorry, the event is full."; break;
                default:
                    alertClass = "alert-danger"; message = "Event not found."; break;
            }
        }
        else
        {
            var ok = await EventService.UnsubscribeAsync(Id, currentUserId);
            if (ok) { alertClass = "alert-info"; message = "Unsubscribed."; isSubscribed = false; }
            else { alertClass = "alert-danger"; message = "Unsubscribe failed."; }
        }

        ev = await EventService.GetByIdAsync(Id);
        StateHasChanged();
    }
}
