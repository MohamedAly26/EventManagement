@page "/eventdetails/{Id:int}"
@using EventManagement.Models
@using EventManagement.Services
@using Microsoft.AspNetCore.Components
@inject EventService EventService

<h3>Event Details</h3>

@if (loading)
{
    <p>Loading...</p>
}
else if (ev == null)
{
    <div class="alert alert-warning">Event not found.</div>
}
else
{
    <div class="card p-3 m-2">
        <h4>@ev.Title</h4>
        <p><b>Date:</b> @ev.StartDateTime.ToString("dd/MM/yyyy HH:mm")</p>
        <p><b>Location:</b> @ev.Location</p>
        <p><b>Description:</b> @ev.Description</p>
        <p><b>Category:</b> @ev.Category</p>
        <p><b>Max Participants:</b> @ev.MaxParticipants</p>
        <p><b>Currently Subscribed:</b> @(ev.Subscriptions?.Count ?? 0)</p>

        <button class="btn btn-success" @onclick="Subscribe">Subscribe</button>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-info mt-2">@message</div>
        }
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    private Event? ev;
    private string? message;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        ev = await EventService.GetByIdAsync(Id);
        loading = false;
        if (ev == null) message = "Event not found or it may have been deleted.";
    }

    private async Task Subscribe()
    {
        // For now dummy userId = 1
        var success = await EventService.SubscribeAsync(Id, 1);
        message = success ? "Successfully subscribed!" : "Subscription failed.";
        ev = await EventService.GetByIdAsync(Id);
    }
}
