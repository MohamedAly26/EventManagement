@page "/admin/events/edit"
@page "/admin/events/edit/{Id:int}"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]


<h3 class="mb-3">@title</h3>

@if (loading)
{
    <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
}
else
{
    <EditForm Model="@model" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Title</label>
                <InputText class="form-control" @bind-Value="model.Title" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Category</label>
                <InputText class="form-control" @bind-Value="model.Category" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Date &amp; time</label>

                <!-- Force string binding via InputText so we avoid the Date/Time binders -->
                <InputText class="form-control"
                           type="datetime-local"
                           @bind-Value="StartLocalText"
                           step="60"
                           min="@MinLocalText" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Location</label>
                <InputText class="form-control" @bind-Value="model.Location" />
            </div>

            <div class="col-md-12">
                <label class="form-label">Description</label>
                <InputTextArea class="form-control" rows="3" @bind-Value="model.Description" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Max participants</label>
                <InputNumber class="form-control" @bind-Value="model.MaxParticipants" />
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-primary" type="submit">Save</button>
            <a class="btn btn-outline-secondary ms-2" href="/admin/events">Back</a>
        </div>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @alertClass mt-3">@message</div>
        }
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }

    private string title = "Create Event";
    private Event model = new();
    private bool loading = true;

    // Internal local DateTime (rounded to minute)
    private DateTime _startLocal;

    // The string value bound to the datetime-local input (yyyy-MM-ddTHH:mm)
    private string StartLocalText
    {
        get => _startLocal.ToString("yyyy-MM-ddTHH:mm");
        set
        {
            // datetime-local always posts in this invariant format
            if (DateTime.TryParse(value, out var dt))
            {
                _startLocal = DateTime.SpecifyKind(dt, DateTimeKind.Local);
                _startLocal = RoundToMinute(_startLocal);
            }
        }
    }

    // Minimum allowed date-time (optional; remove if you want to allow past)
    private string MinLocalText => RoundToMinute(DateTime.Now).ToString("yyyy-MM-ddTHH:mm");

    private string? message;
    private string alertClass = "alert-info";

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            title = "Edit Event";
            var ev = await EventService.GetByIdAsync(Id.Value);
            if (ev is not null)
            {
                model = new Event
                {
                    Id = ev.Id,
                    Title = ev.Title,
                    Description = ev.Description,
                    Category = ev.Category,
                    StartDateTime = ev.StartDateTime,
                    Location = ev.Location,
                    MaxParticipants = ev.MaxParticipants
                };
            }
        }

        if (model.StartDateTime == default)
        {
            model.StartDateTime = RoundToMinute(DateTime.Now.AddDays(1));
        }

        // Initialize the local copy (explicit Local kind)
        _startLocal = model.StartDateTime.Kind == DateTimeKind.Local
            ? RoundToMinute(model.StartDateTime)
            : RoundToMinute(DateTime.SpecifyKind(model.StartDateTime, DateTimeKind.Local));

        loading = false;
    }

    private async Task Save()
    {
        // Map selected date-time back to the model
        model.StartDateTime = _startLocal;

        if (model.Id == 0)
        {
            await EventService.CreateAsync(model);
            alertClass = "alert-success";
            message = "Event created.";
            Nav.NavigateTo("/admin/events", forceLoad: true);
        }
        else
        {
            var ok = await EventService.UpdateAsync(model);
            if (ok)
            {
                alertClass = "alert-success";
                message = "Event updated.";
                Nav.NavigateTo("/admin/events", forceLoad: true);
            }
            else
            {
                alertClass = "alert-danger";
                message = "Update failed.";
            }
        }
    }

    private static DateTime RoundToMinute(DateTime dt)
        => new(dt.Year, dt.Month, dt.Day, dt.Hour, dt.Minute, 0, dt.Kind);
}
