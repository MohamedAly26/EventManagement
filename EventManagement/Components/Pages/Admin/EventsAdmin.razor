@page "/admin/events"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]
@using EventManagement.Services
@using EventManagement.Models
@using Microsoft.AspNetCore.Authorization
@inject EventService EventService
@inject NavigationManager Nav
@inject IJSRuntime JS

<h3 class="mb-3">Admin – Events</h3>

<div class="mb-2">
    <button class="btn btn-primary" @onclick="@(() => Nav.NavigateTo("/admin/events/edit"))">
        + Create New
    </button>
</div>

@if (events is null)
{
    <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
}
else
{
    <table class="table align-middle">
        <thead>
            <tr>
                <th>Title</th>
                <th>When</th>
                <th>Location</th>
                <th>Seats</th>
                <th class="text-end">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in events)
            {
                <tr>
                    <td>@e.Title</td>
                    <td>@e.StartDateTime.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@e.Location</td>
                    <td>@(e.Subscriptions?.Count ?? 0)/@e.MaxParticipants</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-outline-primary me-1"
                                @onclick="@(() => Nav.NavigateTo($"/admin/events/{e.Id}/subscribers"))">
                            Subscribers
                        </button>
                        <button class="btn btn-sm btn-outline-secondary me-1"
                                @onclick="@(() => Nav.NavigateTo($"/admin/events/edit/{e.Id}"))">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-outline-danger"
                                @onclick="@(() => Delete(e.Id))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass">@message</div>
}

@code {
    private List<Event>? events;
    private string? message;
    private string alertClass = "alert-info";

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetAllAsync();
    }

    private async Task Delete(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Delete this event?");
        if (!confirm) return;

        var ok = await EventService.DeleteAsync(id);
        if (ok)
        {
            alertClass = "alert-info";
            message = "Event deleted.";
            events = await EventService.GetAllAsync();
            StateHasChanged();
        }
        else
        {
            alertClass = "alert-danger";
            message = "Delete failed.";
        }
    }
}
