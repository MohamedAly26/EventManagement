@page "/admin/events"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "events.manage")]
@using EventManagement.Models
@using EventManagement.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@inject EventService EventService
@inject NavigationManager Nav
@inject IJSRuntime JS

<h3 class="mb-3">Admin – Events</h3>

<div class="mb-2">
    <button class="btn btn-primary" @onclick='() => Nav.NavigateTo("/admin/events/edit")'>
        + Create New
    </button>
</div>

@if (loading)
{
    <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
}
else if (events is null || events.Count == 0)
{
    <div class="alert alert-info mb-0">No events yet.</div>
}
else
{
    <table class="table align-middle">
        <thead>
            <tr>
                <th>Title</th>
                <th>When</th>
                <th>Location</th>
                <th>Subscribers</th>
                <th class="text-end">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in events)
            {
                var subs = e.Subscriptions?.Count ?? 0;
                <tr>
                    <td>@e.Title</td>
                    <td>@e.StartDateTime.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@e.Location</td>

                    <!-- Mostra chiaramente il numero di iscritti -->
                    <td>
                        <!-- Bootstrap 5.x -->
                        <span class="badge bg-primary text-white">@subs</span>
                        /
                        @e.MaxParticipants
                        <!-- Se usi Bootstrap 4, sostituisci la riga sopra con:
                        <span class="badge badge-primary">@subs</span>
                        -->
                    </td>

                    <td class="text-end">
                        <button class="btn btn-sm btn-outline-primary me-1"
                                @onclick='() => Nav.NavigateTo($"/admin/events/{e.Id}/subscribers")'>
                            Subscribers
                        </button>
                        <button class="btn btn-sm btn-outline-secondary me-1"
                                @onclick='() => Nav.NavigateTo($"/admin/events/edit/{e.Id}")'>
                            Edit
                        </button>
                        <button class="btn btn-sm btn-outline-danger"
                                @onclick='() => Delete(e.Id)'>
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass mt-3">@message</div>
}

@code {
    private bool loading = true;
    private List<Event>? events;
    private string? message;
    private string alertClass = "alert-info";

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetAllAsync(); // Include(e => e.Subscriptions) nel service
        loading = false;
    }

    private async Task Delete(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Delete this event?");
        if (!confirm) return;

        var ok = await EventService.DeleteAsync(id);
        if (ok)
        {
            alertClass = "alert-info";
            message = "Event deleted.";
            events = await EventService.GetAllAsync(); // ricarica
            StateHasChanged();
        }
        else
        {
            alertClass = "alert-danger";
            message = "Delete failed.";
        }
    }
}
