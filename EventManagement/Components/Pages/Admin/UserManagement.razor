@page "/admin/users"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using EventManagement.Security

@attribute [Authorize(Policy = Permissions.Names.ManageUsers)]

@inject UserManager<IdentityUser> UserMgr
@inject RoleManager<IdentityRole> RoleMgr

<h3>User Management</h3>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}

@if (users is null)
{
    <div class="alert alert-info">Loading...</div>
}
else if (users.Count == 0)
{
    <div class="alert alert-info">No users found.</div>
}
else
{
    <table class="table table-sm align-middle">
        <thead>
            <tr>
                <th>Email</th>
                <th>Confirmed</th>
                <th>Roles</th>
                <th style="width:340px">Add role</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in users)
            {
                <tr>
                    <td>@u.Email</td>
                    <td>@(u.EmailConfirmed ? "✓" : "✗")</td>
                    <td>
                   
                        @foreach (var r in u.Roles)
                        {
                            <span class="badge bg-secondary text-white me-1 align-middle">
                                @r
                                <button type="button"
                                        class="btn btn-sm btn-link p-0 ms-1 text-light opacity-75 align-baseline"
                                        title="Remove @r"
                                        @onclick="() => RemoveRole(u, r)">
                                    &times;
                                </button>
                            </span>
                        
                        }
                 

                    </td>
                    <td>
                        <div class="d-flex gap-2">
                            <select class="form-select form-select-sm"
                                    style="max-width:220px"
                                    @onchange="e => _selected[u.Id] = e.Value?.ToString() ?? string.Empty">
                                <option value="">-- choose role --</option>
                                @foreach (var r in roles)
                                {
                                    <option value="@r">@r</option>
                                }
                            </select>
                            <button class="btn btn-sm btn-primary" disabled="@busy"
                                    @onclick="() => AddRole(u)">
                                Add
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    record UserVm(string Id, string Email, bool EmailConfirmed, string[] Roles);

    List<UserVm>? users;
    List<string> roles = new();
    string? error;
    bool busy;
    readonly Dictionary<string, string> _selected = new(); // userId -> role scelto

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAll();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private async Task LoadAll()
    {
        // utenti
        var list = await UserMgr.Users.ToListAsync();
        var acc = new List<UserVm>(list.Count);
        foreach (var u in list)
        {
            var rs = await UserMgr.GetRolesAsync(u);
            acc.Add(new UserVm(u.Id, u.Email ?? "", u.EmailConfirmed, rs.ToArray()));
        }
        users = acc;

        // ruoli disponibili
        roles = await RoleMgr.Roles
            .Select(r => r.Name!)
            .OrderBy(n => n)
            .ToListAsync();
    }

    async Task AddRole(UserVm u)
    {
        if (!_selected.TryGetValue(u.Id, out var role) || string.IsNullOrWhiteSpace(role))
            return;

        busy = true; StateHasChanged();
        try
        {
            var user = await UserMgr.FindByIdAsync(u.Id);
            if (user is null) { error = "User not found"; return; }

            var res = await UserMgr.AddToRoleAsync(user, role);
            if (!res.Succeeded) error = string.Join("; ", res.Errors.Select(e => e.Description));
            await LoadAll();
        }
        finally { busy = false; StateHasChanged(); }
    }

    async Task RemoveRole(UserVm u, string role)
    {
        busy = true; StateHasChanged();
        try
        {
            var user = await UserMgr.FindByIdAsync(u.Id);
            if (user is null) { error = "User not found"; return; }

            var res = await UserMgr.RemoveFromRoleAsync(user, role);
            if (!res.Succeeded) error = string.Join("; ", res.Errors.Select(e => e.Description));
            await LoadAll();
        }
        finally { busy = false; StateHasChanged(); }
    }
}
