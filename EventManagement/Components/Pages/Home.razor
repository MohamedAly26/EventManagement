@page "/"
@rendermode InteractiveServer

@using EventManagement.Models
@using EventManagement.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject EventService EventService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Nav

<h4 class="mb-3">Search events</h4>

@if (_redirecting)
{
    <!-- avoid flashing while redirecting admins -->
}
else
{
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-2 align-items-end">
                <div class="col-md-4">
                    <label class="form-label">Title contains</label>
                    <input class="form-control" @bind="q" placeholder="e.g. Music" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">From</label>
                    <InputDate @bind-Value="from" class="form-control" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">To</label>
                    <InputDate @bind-Value="to" class="form-control" />
                </div>

                <div class="col-md-2">
                    <label class="form-label">Category</label>
                    <select class="form-select" @bind="category">
                        <option value="">All</option>
                        @foreach (var c in categories)
                        {
                            <option value="@c">@c</option>
                        }
                    </select>
                </div>

                <div class="col-12">
                    <button class="btn btn-primary me-2" @onclick="Search">Search</button>
                    <button class="btn btn-outline-secondary" @onclick="Clear">Clear</button>
                </div>
            </div>
        </div>
    </div>

    <h4 class="mb-3">Available events</h4>

    @if (loading)
    {
        <div class="spinner-border" role="status"><span class="visually-hidden">Loading…</span></div>
    }
    else if (events.Count == 0)
    {
        <div class="alert alert-info">No events found.</div>
    }
    else
    {
        <!-- 1/row on phones, 2 on tablets, 4 on desktop -->
        <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-3">
            @foreach (var e in events)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title mb-1 text-truncate">@e.Title</h5>
                            <div class="small text-muted mb-2">
                                @e.StartDateTime.ToString("dd/MM/yyyy HH:mm") · @e.Location
                            </div>

                            @if (!string.IsNullOrWhiteSpace(e.Description))
                            {
                                <p class="card-text small flex-grow-1">@e.Description</p>
                            }
                            else
                            {
                                <div class="flex-grow-1"></div>
                            }

                            <div class="mt-auto d-flex justify-content-between align-items-center">
                                <span class="badge text-bg-light">
                                    @(e.Subscriptions?.Count ?? 0) / @e.MaxParticipants
                                </span>
                                <!-- Use anchor to avoid Razor lambda parsing issues -->
                                <a class="btn btn-sm btn-primary"
                                   href="@($"/eventdetails/{e.Id}")">
                                    View details
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    // filters
    private string? q;
    private string? category;
    private DateTime? from;
    private DateTime? to;

    private List<string> categories = new();
    private List<Event> events = new();

    private bool loading = true;
    private bool _redirecting = false;

    protected override async Task OnInitializedAsync()
    {
        // Redirect admins to the dashboard
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        if (auth.User.Identity?.IsAuthenticated == true && auth.User.IsInRole("Admin"))
        {
            _redirecting = true;
            Nav.NavigateTo("/admin/events", forceLoad: true);
            return;
        }

        categories = await EventService.GetCategoriesAsync();
        await LoadAll();
    }

    protected override bool ShouldRender() => !_redirecting;

    private async Task LoadAll()
    {
        loading = true;
        events = await EventService.GetAllAsync();
        loading = false;
    }

    private async Task Search()
    {
        loading = true;
        events = await EventService.SearchAsync(q, category, from, to, location: null);
        loading = false;
    }

    private async Task Clear()
    {
        q = category = null;
        from = to = null;
        await LoadAll();
    }
}
