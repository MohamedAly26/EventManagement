@page "/"
@using EventManagement.Models
@using EventManagement.Services
@using EventManagement.Shared
@using Microsoft.AspNetCore.Components.Authorization
@inject EventService EventService
@inject NavigationManager Nav

<h3>Available Events</h3>

@if (events == null)
{
    <p>Loading events...</p>
}
else if (!events.Any())
{
    <p>No events available.</p>
}
else
{
    <div class="d-flex flex-wrap">
        @foreach (var e in events)
        {
            <EventCard Event="e" />
        }
    </div>
}

@code {
    private List<EventManagement.Models.Event>? events;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Se è Admin → redirect alla dashboard
        if (AuthStateTask is not null)
        {
            var user = (await AuthStateTask).User;
            if (user.Identity?.IsAuthenticated == true && user.IsInRole("Admin"))
            {
                Nav.NavigateTo("/admin/events", forceLoad: true);
                return;
            }
        }

        // Utenti normali → carica le card
        events = await EventService.GetAllAsync();
    }
}
