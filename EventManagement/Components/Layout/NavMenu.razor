@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager Nav

<nav class="nav flex-column">
    <NavLink href="/" Match="NavLinkMatch.All" class="nav-link">
        <span class="oi oi-home me-2"></span>Home
    </NavLink>

    <!-- My Subscriptions solo per utenti NON Admin -->
    <AuthorizeView Roles="Admin">
        <Authorized>
            @* niente *@
        </Authorized>
        <NotAuthorized>
            <NavLink href="/me/subscriptions" class="nav-link">
                <span class="oi oi-list me-2"></span>My Subscriptions
            </NavLink>
        </NotAuthorized>
    </AuthorizeView>

    <!-- Link Admin visibile solo agli Admin -->
    <AuthorizeView Roles="Admin">
        <Authorized>
            <NavLink href="/admin/events" class="nav-link">
                <span class="oi oi-cog me-2"></span>Admin
            </NavLink>
        </Authorized>
    </AuthorizeView>


    <div class="mt-3">
        <AuthorizeView>
            <Authorized>
                <div class="small text-muted px-3">Hello, @context.User.Identity?.Name</div>
                <button class="btn btn-sm btn-outline-secondary ms-3 mt-2" @onclick="Logout">
                    Logout
                </button>
            </Authorized>
            <NotAuthorized>
                <NavLink href="/account/login" class="nav-link">Login</NavLink>
                <NavLink href="/account/register" class="nav-link">Register</NavLink>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</nav>

@code {
    private async Task Logout()
    {
        await SignInManager.SignOutAsync();
        Nav.NavigateTo("/", forceLoad: true);
    }
}
